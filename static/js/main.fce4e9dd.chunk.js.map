{"version":3,"sources":["Chess.jsx","App.js","reportWebVitals.js","index.js"],"names":["Square","styled","button","ChessElement","div","props","chessColor","Chess","y","x","addChess","squares","color","onClick","Title","span","BoardRow","App","useState","React","useEffect","Array","fill","setSquares","history","setHistory","setColor","currentY","setCurrentY","currentX","setCurrentX","currentColor","newBoard","JSON","parse","stringify","push","judge","offsetY","offsetX","count","alert","className","map","square","records","index","handleHistory","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fce4e9dd.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Square = styled.button`\r\n  background: #E69500;\r\n  border: 1px solid black;\r\n  position: relative;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  line-height: 34px;\r\n  margin-right: -1px;\r\n  margin-top: -1px;\r\n  padding: 0;\r\n  text-align: center;\r\n  width: 5%;\r\n  min-height: 47.17px;\r\n  min-width: 47.17px\r\n`\r\n\r\nconst ChessElement = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  border-radius: 50%;\r\n  transform: scale(0.75);\r\n  top: -50%;\r\n  left:-50%;\r\n  z-index: 1;\r\n\r\n  ${(props) =>\r\n    props.chessColor === \"black\" &&\r\n    `\r\n   background: black;\r\n  `}\r\n\r\n  ${(props) =>\r\n    props.chessColor === \"white\" &&\r\n    `\r\n   background: white;\r\n  `}\r\n`;\r\n\r\nexport default function Chess(props){\r\n  const { y, x, addChess, squares, color, } = props\r\n  const chessColor = squares[y][x]\r\n\r\n  return (\r\n    <>\r\n      <Square onClick={()=>{addChess(y, x, color)}}>\r\n         <ChessElement chessColor ={chessColor}/>\r\n      </Square>\r\n    </>\r\n  )\r\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport Chess from \"./Chess\";\n\nconst Title = styled.span`\n  margin-left: 500px;\n  font-size: 36px;\n  text-align: center;\n`;\n\nconst BoardRow = styled.div`\n  clear: both;\n  content: \"\";\n  display: flex;\n  width: 50%;\n  margin: 0 auto;\n`;\n\nfunction App() {\n  const { useState, useEffect } = React;\n  const SIZE = 19;\n  const [squares, setSquares] = useState(\n    Array(SIZE).fill(Array(SIZE).fill(null))\n  );\n  const [history, setHistory] = useState([]);\n  const [color, setColor] = useState(\"black\");\n  const [currentY, setCurrentY] = useState(0);\n  const [currentX, setCurrentX] = useState(0);\n\n  function able(y, x) {\n    if (y >= 0 && y <= 18 && x >= 0 && x <= 18) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const addChess = (y, x, currentColor) => {\n    if (squares[y][x] !== null || y === 0 || x === 0) return;\n    const newBoard = JSON.parse(JSON.stringify(squares));\n    setCurrentY(y);\n    setCurrentX(x);\n    newBoard[y][x] = color;\n    setSquares(newBoard);\n    currentColor === \"black\" ? setColor(\"white\") : setColor(\"black\");\n    history.push(squares);\n    setHistory(history);\n  };\n\n  const judge = (currentY, currentX, squares, offsetY, offsetX) => {\n    let count = 0;\n    let chessColor = squares[currentY][currentX];\n    if (chessColor === null) return;\n    while (currentX >= 0 && currentX <= 18 && currentY >= 0 && currentY <= 18) {\n      if (\n        able(currentY + offsetY, currentX + offsetX) &&\n        chessColor === squares[currentY + offsetY][currentX + offsetX]\n      ) {\n        count++;\n        if (offsetX !== 0) {\n          offsetX > 0 ? currentX++ : currentX--;\n        }\n        if (offsetY !== 0) {\n          offsetY > 0 ? currentY++ : currentY--;\n        }\n      } else {\n        break;\n      }\n    }\n    return count;\n  };\n  const handleHistory = (index) => {\n    setSquares(history[index]);\n    index % 2 === 0 ? setColor(\"black\") : setColor(\"white\");\n  };\n\n  useEffect(() => {\n    if (\n      judge(currentY, currentX, squares, 0, 1) + judge(currentY, currentX, squares, 0, -1) >= 4 ||\n      judge(currentY, currentX, squares, 1, 0) + judge(currentY, currentX, squares, -1, 0) >= 4 ||\n      judge(currentY, currentX, squares, -1, 1) + judge(currentY, currentX, squares, 1, -1) >= 4 ||\n      judge(currentY, currentX, squares, -1, -1) + judge(currentY, currentX, squares, 1, 1) >= 4\n    ) {\n      alert(\n        `${squares[currentY][currentX] === \"black\" ? \"黑子\" : \"白子\"}獲勝!!`\n      );\n      setSquares(Array(SIZE).fill(Array(SIZE).fill(null)));\n      setHistory([]);\n      setColor(\"black\");\n    }\n  }, [currentX, currentY, squares]);\n\n  return (\n    <div className=\"App\">\n      <Title>輪到{`${color === \"black\" ? \"黑子\" : \"白子\"}`}</Title>\n      {squares.map((square, y) => {\n        return (\n          <BoardRow y={y} key={y}>\n            {square.map((square, x) => {\n              return (\n                <Chess\n                  key={x}\n                  y={y}\n                  x={x}\n                  addChess={addChess}\n                  squares={squares}\n                  color={color}\n                />\n              );\n            })}\n          </BoardRow>\n        );\n      })}\n      {history.map((records, index) => {\n        return (\n          <button\n            onClick={() => {\n              handleHistory(index);\n              setHistory(history.slice(0, index));\n            }}\n            key={index}\n          >\n            {`回到第${index}步`}\n          </button>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}